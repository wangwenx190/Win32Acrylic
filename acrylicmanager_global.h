/*
 * MIT License
 *
 * Copyright (C) 2021 by wangwenx190 (Yuhang Zhao)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

#pragma once

#ifndef WIN32_LEAN_AND_MEAN
#define WIN32_LEAN_AND_MEAN
#endif

#ifndef WINRT_LEAN_AND_MEAN
#define WINRT_LEAN_AND_MEAN
#endif

#ifndef _CRT_SECURE_NO_WARNINGS
#define _CRT_SECURE_NO_WARNINGS
#endif

#ifndef UNICODE
#define UNICODE
#endif

#ifndef _UNICODE
#define _UNICODE
#endif

#ifndef _ENABLE_EXTENDED_ALIGNED_STORAGE
#define _ENABLE_EXTENDED_ALIGNED_STORAGE
#endif

#ifndef NOMINMAX
#define NOMINMAX
#endif

#ifdef WINVER
#undef WINVER
#endif

#ifdef _WIN32_WINNT
#undef _WIN32_WINNT
#endif

#ifndef NTDDI_WIN10_19H1
#define NTDDI_WIN10_19H1 0x0A000007
#endif

#define WINVER NTDDI_WIN10_19H1
#define _WIN32_WINNT NTDDI_WIN10_19H1

#ifndef ACRYLICMANAGER_TRY_EXECUTE_FUNCTION_PART1
#define ACRYLICMANAGER_TRY_EXECUTE_FUNCTION_PART1(funcName) \
static bool tried = false; \
using sig = decltype(&::funcName); \
static sig func = nullptr; \
if (!func) { \
    if (tried) {
#endif

#ifndef ACRYLICMANAGER_TRY_EXECUTE_FUNCTION_PART2
#define ACRYLICMANAGER_TRY_EXECUTE_FUNCTION_PART2(libName) \
    } else { \
        tried = true; \
        const HMODULE dll = LoadLibraryExW(L#libName ".dll", nullptr, LOAD_LIBRARY_SEARCH_SYSTEM32); \
        if (!dll) { \
            OutputDebugStringW(L"Failed to load " #libName ".dll.");
#endif

#ifndef ACRYLICMANAGER_TRY_EXECUTE_FUNCTION_PART3
#define ACRYLICMANAGER_TRY_EXECUTE_FUNCTION_PART3(funcName) \
        } \
        func = reinterpret_cast<sig>(GetProcAddress(dll, #funcName)); \
        if (!func) { \
            OutputDebugStringW(L"Failed to resolve " #funcName "().");
#endif

#ifndef ACRYLICMANAGER_TRY_EXECUTE_FUNCTION_PART4
#define ACRYLICMANAGER_TRY_EXECUTE_FUNCTION_PART4 \
        } \
    } \
}
#endif

#ifndef ACRYLICMANAGER_TRY_EXECUTE_FUNCTION_RETURN_VOID
#define ACRYLICMANAGER_TRY_EXECUTE_FUNCTION_RETURN_VOID return;
#endif

#ifndef ACRYLICMANAGER_TRY_EXECUTE_FUNCTION_RETURN_VALUE
#define ACRYLICMANAGER_TRY_EXECUTE_FUNCTION_RETURN_VALUE(value) return (value);
#endif

#ifndef ACRYLICMANAGER_TRY_EXECUTE_FUNCTION_CALL_FUNC
#define ACRYLICMANAGER_TRY_EXECUTE_FUNCTION_CALL_FUNC(...) func(__VA_ARGS__);
#endif

#ifndef ACRYLICMANAGER_TRY_EXECUTE_FUNCTION_CALL_FUNC_RETURN
#define ACRYLICMANAGER_TRY_EXECUTE_FUNCTION_CALL_FUNC_RETURN(...) return func(__VA_ARGS__);
#endif

#ifndef ACRYLICMANAGER_TRY_EXECUTE_VOID_FUNCTION
#define ACRYLICMANAGER_TRY_EXECUTE_VOID_FUNCTION(funcName, libName, ...) \
ACRYLICMANAGER_TRY_EXECUTE_FUNCTION_PART1(funcName) \
ACRYLICMANAGER_TRY_EXECUTE_FUNCTION_RETURN_VOID \
ACRYLICMANAGER_TRY_EXECUTE_FUNCTION_PART2(libName) \
ACRYLICMANAGER_TRY_EXECUTE_FUNCTION_RETURN_VOID \
ACRYLICMANAGER_TRY_EXECUTE_FUNCTION_PART3(funcName) \
ACRYLICMANAGER_TRY_EXECUTE_FUNCTION_RETURN_VOID \
ACRYLICMANAGER_TRY_EXECUTE_FUNCTION_PART4 \
ACRYLICMANAGER_TRY_EXECUTE_FUNCTION_CALL_FUNC(__VA_ARGS__)
#endif

#ifndef ACRYLICMANAGER_TRY_EXECUTE_RETURN_FUNCTION
#define ACRYLICMANAGER_TRY_EXECUTE_RETURN_FUNCTION(funcName, libName, defVal, ...) \
ACRYLICMANAGER_TRY_EXECUTE_FUNCTION_PART1(funcName) \
ACRYLICMANAGER_TRY_EXECUTE_FUNCTION_RETURN_VALUE(defVal) \
ACRYLICMANAGER_TRY_EXECUTE_FUNCTION_PART2(libName) \
ACRYLICMANAGER_TRY_EXECUTE_FUNCTION_RETURN_VALUE(defVal) \
ACRYLICMANAGER_TRY_EXECUTE_FUNCTION_PART3(funcName) \
ACRYLICMANAGER_TRY_EXECUTE_FUNCTION_RETURN_VALUE(defVal) \
ACRYLICMANAGER_TRY_EXECUTE_FUNCTION_PART4 \
ACRYLICMANAGER_TRY_EXECUTE_FUNCTION_CALL_FUNC_RETURN(__VA_ARGS__)
#endif

#ifndef ACRYLICMANAGER_TRY_EXECUTE_USER_FUNCTION
#define ACRYLICMANAGER_TRY_EXECUTE_USER_FUNCTION(funcName, ...) ACRYLICMANAGER_TRY_EXECUTE_RETURN_FUNCTION(funcName, User32, FALSE, ##__VA_ARGS__)
#endif

#ifndef ACRYLICMANAGER_TRY_EXECUTE_USER_INT_FUNCTION
#define ACRYLICMANAGER_TRY_EXECUTE_USER_INT_FUNCTION(funcName, ...) ACRYLICMANAGER_TRY_EXECUTE_RETURN_FUNCTION(funcName, User32, 0, ##__VA_ARGS__)
#endif

#ifndef ACRYLICMANAGER_TRY_EXECUTE_SHCORE_FUNCTION
#define ACRYLICMANAGER_TRY_EXECUTE_SHCORE_FUNCTION(funcName, ...) ACRYLICMANAGER_TRY_EXECUTE_RETURN_FUNCTION(funcName, SHCore, E_NOTIMPL, ##__VA_ARGS__)
#endif

#ifndef ACRYLICMANAGER_TRY_EXECUTE_THEME_FUNCTION
#define ACRYLICMANAGER_TRY_EXECUTE_THEME_FUNCTION(funcName, ...) ACRYLICMANAGER_TRY_EXECUTE_RETURN_FUNCTION(funcName, UxTheme, E_NOTIMPL, ##__VA_ARGS__)
#endif

#ifndef ACRYLICMANAGER_TRY_EXECUTE_THEME_PTR_FUNCTION
#define ACRYLICMANAGER_TRY_EXECUTE_THEME_PTR_FUNCTION(funcName, ...) ACRYLICMANAGER_TRY_EXECUTE_RETURN_FUNCTION(funcName, UxTheme, nullptr, ##__VA_ARGS__)
#endif

#ifndef ACRYLICMANAGER_TRY_EXECUTE_DWM_FUNCTION
#define ACRYLICMANAGER_TRY_EXECUTE_DWM_FUNCTION(funcName, ...) ACRYLICMANAGER_TRY_EXECUTE_RETURN_FUNCTION(funcName, DwmApi, E_NOTIMPL, ##__VA_ARGS__)
#endif

#ifndef ACRYLICMANAGER_TRY_EXECUTE_WINRT_FUNCTION
#define ACRYLICMANAGER_TRY_EXECUTE_WINRT_FUNCTION(funcName, ...) ACRYLICMANAGER_TRY_EXECUTE_RETURN_FUNCTION(funcName, ComBase, E_NOTIMPL, ##__VA_ARGS__)
#endif

#ifndef ACRYLICMANAGER_TRY_EXECUTE_WINRT_VOID_FUNCTION
#define ACRYLICMANAGER_TRY_EXECUTE_WINRT_VOID_FUNCTION(funcName, ...) ACRYLICMANAGER_TRY_EXECUTE_VOID_FUNCTION(funcName, ComBase, ##__VA_ARGS__)
#endif

#ifndef ACRYLICMANAGER_TRY_EXECUTE_WINRT_INT_FUNCTION
#define ACRYLICMANAGER_TRY_EXECUTE_WINRT_INT_FUNCTION(funcName, ...) ACRYLICMANAGER_TRY_EXECUTE_RETURN_FUNCTION(funcName, ComBase, 0, ##__VA_ARGS__)
#endif

#ifndef ACRYLICMANAGER_TRY_EXECUTE_WINRT_BOOL_FUNCTION
#define ACRYLICMANAGER_TRY_EXECUTE_WINRT_BOOL_FUNCTION(funcName, ...) ACRYLICMANAGER_TRY_EXECUTE_RETURN_FUNCTION(funcName, ComBase, FALSE, ##__VA_ARGS__)
#endif

#ifndef ACRYLICMANAGER_TRY_EXECUTE_WINRT_PTR_FUNCTION
#define ACRYLICMANAGER_TRY_EXECUTE_WINRT_PTR_FUNCTION(funcName, ...) ACRYLICMANAGER_TRY_EXECUTE_RETURN_FUNCTION(funcName, ComBase, nullptr, ##__VA_ARGS__)
#endif

#ifndef ACRYLICMANAGER_TRY_EXECUTE_OLE_FUNCTION
#define ACRYLICMANAGER_TRY_EXECUTE_OLE_FUNCTION(funcName, ...) ACRYLICMANAGER_TRY_EXECUTE_RETURN_FUNCTION(funcName, Ole32, E_NOTIMPL, ##__VA_ARGS__)
#endif

#include <Windows.h>
